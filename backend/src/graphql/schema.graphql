# GraphQL Schema for PawsRoam

type User {
  id: ID!
  email: String!
  name: String
  # Add other user fields as needed, e.g., createdAt
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  _empty: String # Placeholder to ensure Query type is valid
  # me: User # Example query to get current user
  testGemini(prompt: String!): String # Test query for Gemini API
  searchVenues(filterByName: String, filterByType: String): [Venue!] # Query for venues
}

type Mutation {
  registerUser(email: String!, password: String!, name: String): AuthPayload!
  loginUser(email: String!, password: String!): AuthPayload!
}

# Example Types (will be expanded later)
# type Pet {
#   id: ID!
#   name: String!
#   breed: String
#   owner: User!
# }

scalar JSON # For opening_hours

type Venue {
  id: ID!
  owner_user_id: ID # Corresponds to UUID of user
  name: String!
  address: String
  city: String
  state_province: String
  postal_code: String
  country: String
  latitude: Float!
  longitude: Float!
  phone_number: String
  website: String
  description: String
  opening_hours: JSON # Use the scalar JSON type
  type: String! # e.g., "cafe", "park", "store"

  pet_policy_summary: String
  pet_policy_details: String
  allows_off_leash: Boolean
  has_indoor_seating_for_pets: Boolean
  has_outdoor_seating_for_pets: Boolean
  water_bowls_provided: Boolean
  pet_treats_available: Boolean
  pet_menu_available: Boolean
  dedicated_pet_area: Boolean
  weight_limit_kg: Float
  carrier_required: Boolean
  additional_pet_services: String

  status: String # e.g., 'active', 'pending_approval'
  google_place_id: String

  created_at: String # Typically represented as ISO8601 String
  updated_at: String # Typically represented as ISO8601 String

  # Future computed fields can be added here, e.g., averageRating
}

# Input type for filtering venues (optional for Phase 1 simple filter)
# input VenueFilterInput {
#   type: String
#   # other filter criteria like amenities, ratings etc.
# }
