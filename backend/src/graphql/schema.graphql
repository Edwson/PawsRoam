# GraphQL Schema for PawsRoam

type User {
  id: ID!
  email: String!
  name: String
  role: String!
  status: String!
  avatar_url: String # URL to the user's avatar image
  created_at: String # ISO8601 String for consistency
  updated_at: String # ISO8601 String for consistency
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  _empty: String # Placeholder to ensure Query type is valid
  # me: User # Example query to get current user
  testGemini(prompt: String!): String # Test query for Gemini API
  searchVenues(
    filterByName: String,
    filterByType: String,
    latitude: Float,
    longitude: Float,
    radiusKm: Float
  ): [Venue!] # Query for venues, now with optional geo-filtering
  myPets: [Pet!] # Query to get pets for the authenticated user
  getPetById(id: ID!): Pet # Query to get a single pet by its ID, for editing
  getVenueById(id: ID!): Venue # Query to get a single venue by its ID
  getReviewsForVenue(venueId: ID!): [Review!]
  myReviews: [Review!]
  getPetCareAdvice(question: String!): String! # AI Pet Care Q&A
  myOwnedVenues: [Venue!] # For shop owners to see their venues
  adminGetVenueClaims(status: String): [VenueClaim!] # For admins to list claims
  getActivePetAlerts(latitude: Float, longitude: Float, radiusKm: Int): [PetAlert!] # For PawsSafers/admins
  getMyCreatedAlerts: [PetAlert!] # For users to see alerts they created
}

# Pet Alert Types
type PetAlert {
  id: ID!
  createdByUser: User # User who created the alert
  alert_type: String! # e.g., 'lost_pet', 'found_pet', 'pet_in_danger', 'other'
  description: String!
  status: String! # e.g., 'active', 'investigating', 'resolved', 'cancelled'
  latitude: Float!
  longitude: Float!
  location_accuracy: Int
  pet_name: String
  pet_species: String
  pet_breed: String
  pet_image_url: String
  contact_phone: String
  contact_email: String
  last_seen_at: String # ISO8601 String
  resolved_at: String  # ISO8601 String
  created_at: String!
  updated_at: String!
}

input CreatePetAlertInput {
  alert_type: String!
  description: String!
  latitude: Float!
  longitude: Float!
  location_accuracy: Int
  pet_name: String
  pet_species: String
  pet_breed: String
  pet_image_url: String
  contact_phone: String
  contact_email: String
  last_seen_at: String # ISO8601 String e.g. "YYYY-MM-DDTHH:mm:ssZ"
}

input UpdatePetAlertStatusInput {
  alertId: ID!
  newStatus: String! # e.g., 'investigating', 'resolved', 'cancelled'
  notes: String # Optional notes from PawsSafer/Admin updating the status
}


# Venue Claim Types
type VenueClaim {
  id: ID!
  venue: Venue! # The venue being claimed
  user: User!   # The user (shop owner) making the claim
  status: String! # e.g., 'pending', 'approved', 'rejected', 'cancelled'
  claim_message: String
  admin_notes: String
  created_at: String!
  updated_at: String!
}

input RequestVenueClaimInput {
  venueId: ID!
  claimMessage: String # Optional message from the shop owner
}

# Input for admin to review a claim
input AdminReviewVenueClaimInput {
  claimId: ID!
  newStatus: String! # Should be 'approved' or 'rejected' by admin
  adminNotes: String # Optional notes from admin
}


type Mutation {
  registerUser(email: String!, password: String!, name: String): AuthPayload!
  loginUser(email: String!, password: String!): AuthPayload!

  createPet(input: CreatePetInput!): Pet!
  updatePet(id: ID!, input: UpdatePetInput!): Pet
  deletePet(id: ID!): Boolean

  addReview(input: CreateReviewInput!): Review!
  updateReview(reviewId: ID!, input: UpdateReviewInput!): Review
  deleteReview(reviewId: ID!): Boolean

  # Admin mutations for venues
  adminCreateVenue(input: AdminCreateVenueInput!): Venue!
  adminUpdateVenue(id: ID!, input: AdminUpdateVenueInput!): Venue
  adminDeleteVenue(id: ID!): Boolean

  # User profile mutations
  updateUserProfilePicture(imageUrl: String!): User!

  # Pet mutations
  updatePetAvatar(petId: ID!, imageUrl: String!): Pet!

  # Admin Venue Image Mutation
  adminUpdateVenueImage(venueId: ID!, imageUrl: String!): Venue!

  # Admin User Management
  adminUpdateUser(userId: ID!, input: AdminUpdateUserInput!): User

  # Shop Owner mutations
  shopOwnerCreateVenue(input: AdminCreateVenueInput!): Venue! # Reusing AdminCreateVenueInput
  shopOwnerUpdateVenueDetails(venueId: ID!, input: ShopOwnerUpdateVenueInput!): Venue!
  shopOwnerUpdateVenueImage(venueId: ID!, imageUrl: String!): Venue!
  requestVenueClaim(input: RequestVenueClaimInput!): VenueClaim!

  # Admin mutations for venue claims
  adminReviewVenueClaim(input: AdminReviewVenueClaimInput!): VenueClaim!

  # Pet Alert Mutations
  createPetAlert(input: CreatePetAlertInput!): PetAlert!
  updatePetAlertStatus(input: UpdatePetAlertStatusInput!): PetAlert!
  cancelPetAlert(alertId: ID!): PetAlert
}

input ShopOwnerUpdateVenueInput {
  name: String
  address: String
  city: String
  state_province: String
  postal_code: String
  country: String
  latitude: Float
  longitude: Float
  phone_number: String
  website: String
  description: String
  opening_hours: JSON
  type: String

  pet_policy_summary: String
  pet_policy_details: String
  allows_off_leash: Boolean
  has_indoor_seating_for_pets: Boolean
  has_outdoor_seating_for_pets: Boolean
  water_bowls_provided: Boolean
  pet_treats_available: Boolean
  pet_menu_available: Boolean
  dedicated_pet_area: Boolean
  weight_limit_kg: Float
  carrier_required: Boolean
  additional_pet_services: String
  # Note: 'status' and 'owner_user_id' are intentionally omitted for shop owner updates
  google_place_id: String
}

input AdminUpdateUserInput {
  name: String
  email: String # Consider if email updates should have extra verification
  role: String   # e.g., "user", "admin", "business_owner"
  status: String # e.g., "active", "suspended"
}

input AdminCreateVenueInput {
  owner_user_id: ID # Optional: Link to a user who owns/manages the venue
  name: String!
  address: String
  city: String
  state_province: String
  postal_code: String
  country: String
  latitude: Float!
  longitude: Float!
  phone_number: String
  website: String
  description: String
  opening_hours: JSON # Assuming JSON string or mapped scalar
  type: String! # e.g., "cafe", "park", "store"

  pet_policy_summary: String
  pet_policy_details: String
  allows_off_leash: Boolean
  has_indoor_seating_for_pets: Boolean
  has_outdoor_seating_for_pets: Boolean
  water_bowls_provided: Boolean
  pet_treats_available: Boolean
  pet_menu_available: Boolean
  dedicated_pet_area: Boolean
  weight_limit_kg: Float
  carrier_required: Boolean
  additional_pet_services: String

  status: String # e.g., 'active', 'pending_approval', 'rejected'
  google_place_id: String # Optional
}

input AdminUpdateVenueInput {
  owner_user_id: ID
  name: String
  address: String
  city: String
  state_province: String
  postal_code: String
  country: String
  latitude: Float
  longitude: Float
  phone_number: String
  website: String
  description: String
  opening_hours: JSON
  type: String

  pet_policy_summary: String
  pet_policy_details: String
  allows_off_leash: Boolean
  has_indoor_seating_for_pets: Boolean
  has_outdoor_seating_for_pets: Boolean
  water_bowls_provided: Boolean
  pet_treats_available: Boolean
  pet_menu_available: Boolean
  dedicated_pet_area: Boolean
  weight_limit_kg: Float
  carrier_required: Boolean
  additional_pet_services: String

  status: String
  google_place_id: String
}

type Review {
  id: ID!
  rating: Int!
  comment: String
  visit_date: String # e.g., "YYYY-MM-DD"
  user: User! # The user who wrote the review
  venue: Venue! # The venue being reviewed
  created_at: String! # ISO8601 String
  updated_at: String! # ISO8601 String
}

input CreateReviewInput {
  venueId: ID!
  rating: Int! # e.g., 1-5
  comment: String
  visit_date: String # e.g., "YYYY-MM-DD"
}

input UpdateReviewInput {
  rating: Int
  comment: String
  visit_date: String # e.g., "YYYY-MM-DD"
}

type Pet {
  id: ID!
  user_id: ID! # The user this pet belongs to
  name: String!
  species: String! # e.g., "Dog", "Cat"
  breed: String
  birthdate: String # Represent date as ISO8601 String e.g. "YYYY-MM-DD"
  avatar_url: String
  notes: String
  created_at: String # ISO8601 String
  updated_at: String # ISO8601 String
  # owner: User! # Could resolve the User object if needed
}

input CreatePetInput {
  name: String!
  species: String!
  breed: String
  birthdate: String # e.g., "YYYY-MM-DD"
  avatar_url: String
  notes: String
}

input UpdatePetInput {
  name: String
  species: String
  breed: String
  birthdate: String # e.g., "YYYY-MM-DD"
  avatar_url: String
  notes: String
}

scalar JSON # For opening_hours

type Venue {
  id: ID!
  owner_user_id: ID # Corresponds to UUID of user
  name: String!
  address: String
  city: String
  state_province: String
  postal_code: String
  country: String
  latitude: Float!
  longitude: Float!
  phone_number: String
  website: String
  description: String
  opening_hours: JSON # Use the scalar JSON type
  type: String! # e.g., "cafe", "park", "store"

  pet_policy_summary: String
  pet_policy_details: String
  allows_off_leash: Boolean
  has_indoor_seating_for_pets: Boolean
  has_outdoor_seating_for_pets: Boolean
  water_bowls_provided: Boolean
  pet_treats_available: Boolean
  pet_menu_available: Boolean
  dedicated_pet_area: Boolean
  weight_limit_kg: Float
  carrier_required: Boolean
  additional_pet_services: String

  status: String # e.g., 'active', 'pending_approval'
  google_place_id: String

  average_rating: Float # From venues table
  review_count: Int   # From venues table
  reviews: [Review!] # Associated reviews for the venue
  image_url: String # URL for the venue's main image

  created_at: String # Typically represented as ISO8601 String
  updated_at: String # Typically represented as ISO8601 String
}

# Input type for filtering venues (optional for Phase 1 simple filter)
# input VenueFilterInput {
#   type: String
#   # other filter criteria like amenities, ratings etc.
# }
