# GraphQL Schema for PawsRoam

type User {
  id: ID!
  email: String!
  name: String
  role: String!
  status: String!
  created_at: String # ISO8601 String for consistency
  updated_at: String # ISO8601 String for consistency
  # Add other user fields as needed
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  _empty: String # Placeholder to ensure Query type is valid
  # me: User # Example query to get current user
  testGemini(prompt: String!): String # Test query for Gemini API
  searchVenues(filterByName: String, filterByType: String): [Venue!] # Query for venues
  myPets: [Pet!] # Query to get pets for the authenticated user
  getPetById(id: ID!): Pet # Query to get a single pet by its ID, for editing
  getVenueById(id: ID!): Venue # Query to get a single venue by its ID
  getReviewsForVenue(venueId: ID!): [Review!]
  myReviews: [Review!]
}

type Mutation {
  registerUser(email: String!, password: String!, name: String): AuthPayload!
  loginUser(email: String!, password: String!): AuthPayload!

  createPet(input: CreatePetInput!): Pet!
  updatePet(id: ID!, input: UpdatePetInput!): Pet
  deletePet(id: ID!): Boolean

  addReview(input: CreateReviewInput!): Review!
  updateReview(reviewId: ID!, input: UpdateReviewInput!): Review
  deleteReview(reviewId: ID!): Boolean
}

type Review {
  id: ID!
  rating: Int!
  comment: String
  visit_date: String # e.g., "YYYY-MM-DD"
  user: User! # The user who wrote the review
  venue: Venue! # The venue being reviewed
  created_at: String! # ISO8601 String
  updated_at: String! # ISO8601 String
}

input CreateReviewInput {
  venueId: ID!
  rating: Int! # e.g., 1-5
  comment: String
  visit_date: String # e.g., "YYYY-MM-DD"
}

input UpdateReviewInput {
  rating: Int
  comment: String
  visit_date: String # e.g., "YYYY-MM-DD"
}

type Pet {
  id: ID!
  user_id: ID! # The user this pet belongs to
  name: String!
  species: String! # e.g., "Dog", "Cat"
  breed: String
  birthdate: String # Represent date as ISO8601 String e.g. "YYYY-MM-DD"
  avatar_url: String
  notes: String
  created_at: String # ISO8601 String
  updated_at: String # ISO8601 String
  # owner: User! # Could resolve the User object if needed
}

input CreatePetInput {
  name: String!
  species: String!
  breed: String
  birthdate: String # e.g., "YYYY-MM-DD"
  avatar_url: String
  notes: String
}

input UpdatePetInput {
  name: String
  species: String
  breed: String
  birthdate: String # e.g., "YYYY-MM-DD"
  avatar_url: String
  notes: String
}

scalar JSON # For opening_hours

type Venue {
  id: ID!
  owner_user_id: ID # Corresponds to UUID of user
  name: String!
  address: String
  city: String
  state_province: String
  postal_code: String
  country: String
  latitude: Float!
  longitude: Float!
  phone_number: String
  website: String
  description: String
  opening_hours: JSON # Use the scalar JSON type
  type: String! # e.g., "cafe", "park", "store"

  pet_policy_summary: String
  pet_policy_details: String
  allows_off_leash: Boolean
  has_indoor_seating_for_pets: Boolean
  has_outdoor_seating_for_pets: Boolean
  water_bowls_provided: Boolean
  pet_treats_available: Boolean
  pet_menu_available: Boolean
  dedicated_pet_area: Boolean
  weight_limit_kg: Float
  carrier_required: Boolean
  additional_pet_services: String

  status: String # e.g., 'active', 'pending_approval'
  google_place_id: String

  average_rating: Float # From venues table
  review_count: Int   # From venues table
  reviews: [Review!] # Associated reviews for the venue

  created_at: String # Typically represented as ISO8601 String
  updated_at: String # Typically represented as ISO8601 String
}

# Input type for filtering venues (optional for Phase 1 simple filter)
# input VenueFilterInput {
#   type: String
#   # other filter criteria like amenities, ratings etc.
# }
